/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PaymentGatewayV2 {
  export type QuoteStruct = {
    payer: AddressLike;
    payee: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    fee: BigNumberish;
    expiry: BigNumberish;
    pid: BytesLike;
  };

  export type QuoteStructOutput = [
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    fee: bigint,
    expiry: bigint,
    pid: string
  ] & {
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    fee: bigint;
    expiry: bigint;
    pid: string;
  };
}

export interface PaymentGatewayV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "EIP712_NAME"
      | "EIP712_QUOTE_TYPEHASH"
      | "EIP712_VERSION"
      | "domainSeparator"
      | "facilitator"
      | "feeCollector"
      | "owner"
      | "pay"
      | "payWithPermit"
      | "payments"
      | "quote"
      | "refund"
      | "renounceOwnership"
      | "setFacilitator"
      | "setFeeCollector"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PaymentQuoted"
      | "PaymentRefunded"
      | "PaymentSettled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EIP712_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_QUOTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facilitator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pay", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payWithPermit",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [PaymentGatewayV2.QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFacilitator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_QUOTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facilitator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFacilitator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentQuotedEvent {
  export type InputTuple = [
    pid: BytesLike,
    payer: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    pid: string,
    payer: string,
    token: string,
    amount: bigint,
    fee: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    pid: string;
    payer: string;
    token: string;
    amount: bigint;
    fee: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRefundedEvent {
  export type InputTuple = [
    pid: BytesLike,
    payer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [pid: string, payer: string, amount: bigint];
  export interface OutputObject {
    pid: string;
    payer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSettledEvent {
  export type InputTuple = [
    pid: BytesLike,
    payer: AddressLike,
    payee: AddressLike,
    netAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    pid: string,
    payer: string,
    payee: string,
    netAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    pid: string;
    payer: string;
    payee: string;
    netAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentGatewayV2 extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentGatewayV2;
  waitForDeployment(): Promise<this>;

  interface: PaymentGatewayV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EIP712_NAME: TypedContractMethod<[], [string], "view">;

  EIP712_QUOTE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  EIP712_VERSION: TypedContractMethod<[], [string], "view">;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  facilitator: TypedContractMethod<[], [string], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pay: TypedContractMethod<[pid: BytesLike], [void], "nonpayable">;

  payWithPermit: TypedContractMethod<
    [
      pid: BytesLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  payments: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        fee: bigint;
        expiry: bigint;
        settled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;

  quote: TypedContractMethod<
    [q: PaymentGatewayV2.QuoteStruct, facilitatorSig: BytesLike],
    [void],
    "nonpayable"
  >;

  refund: TypedContractMethod<[pid: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFacilitator: TypedContractMethod<
    [facilitator_: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeCollector: TypedContractMethod<
    [feeCollector_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EIP712_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EIP712_QUOTE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EIP712_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "facilitator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pay"
  ): TypedContractMethod<[pid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payWithPermit"
  ): TypedContractMethod<
    [
      pid: BytesLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        fee: bigint;
        expiry: bigint;
        settled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [q: PaymentGatewayV2.QuoteStruct, facilitatorSig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[pid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFacilitator"
  ): TypedContractMethod<[facilitator_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[feeCollector_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentQuoted"
  ): TypedContractEvent<
    PaymentQuotedEvent.InputTuple,
    PaymentQuotedEvent.OutputTuple,
    PaymentQuotedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRefunded"
  ): TypedContractEvent<
    PaymentRefundedEvent.InputTuple,
    PaymentRefundedEvent.OutputTuple,
    PaymentRefundedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSettled"
  ): TypedContractEvent<
    PaymentSettledEvent.InputTuple,
    PaymentSettledEvent.OutputTuple,
    PaymentSettledEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentQuoted(bytes32,address,address,uint256,uint256,uint256)": TypedContractEvent<
      PaymentQuotedEvent.InputTuple,
      PaymentQuotedEvent.OutputTuple,
      PaymentQuotedEvent.OutputObject
    >;
    PaymentQuoted: TypedContractEvent<
      PaymentQuotedEvent.InputTuple,
      PaymentQuotedEvent.OutputTuple,
      PaymentQuotedEvent.OutputObject
    >;

    "PaymentRefunded(bytes32,address,uint256)": TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;
    PaymentRefunded: TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;

    "PaymentSettled(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      PaymentSettledEvent.InputTuple,
      PaymentSettledEvent.OutputTuple,
      PaymentSettledEvent.OutputObject
    >;
    PaymentSettled: TypedContractEvent<
      PaymentSettledEvent.InputTuple,
      PaymentSettledEvent.OutputTuple,
      PaymentSettledEvent.OutputObject
    >;
  };
}
