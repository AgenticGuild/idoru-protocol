/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ValidatorMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attest"
      | "challenge"
      | "eas"
      | "owner"
      | "renounceOwnership"
      | "stake"
      | "stakeToken"
      | "transferOwnership"
      | "unstake"
      | "validatorStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Attested"
      | "Challenged"
      | "OwnershipTransferred"
      | "Slashed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "attest", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eas", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorStake",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorStake",
    data: BytesLike
  ): Result;
}

export namespace AttestedEvent {
  export type InputTuple = [validator: AddressLike, attestationId: BytesLike];
  export type OutputTuple = [validator: string, attestationId: string];
  export interface OutputObject {
    validator: string;
    attestationId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengedEvent {
  export type InputTuple = [
    challenger: AddressLike,
    attestationId: BytesLike,
    validator: AddressLike
  ];
  export type OutputTuple = [
    challenger: string,
    attestationId: string,
    validator: string
  ];
  export interface OutputObject {
    challenger: string;
    attestationId: string;
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashedEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValidatorMarket extends BaseContract {
  connect(runner?: ContractRunner | null): ValidatorMarket;
  waitForDeployment(): Promise<this>;

  interface: ValidatorMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attest: TypedContractMethod<[attestationId: BytesLike], [void], "nonpayable">;

  challenge: TypedContractMethod<
    [
      attestationId: BytesLike,
      validator: AddressLike,
      slashAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  eas: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  stakeToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  validatorStake: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attest"
  ): TypedContractMethod<[attestationId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      validator: AddressLike,
      slashAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eas"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorStake"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Attested"
  ): TypedContractEvent<
    AttestedEvent.InputTuple,
    AttestedEvent.OutputTuple,
    AttestedEvent.OutputObject
  >;
  getEvent(
    key: "Challenged"
  ): TypedContractEvent<
    ChallengedEvent.InputTuple,
    ChallengedEvent.OutputTuple,
    ChallengedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Slashed"
  ): TypedContractEvent<
    SlashedEvent.InputTuple,
    SlashedEvent.OutputTuple,
    SlashedEvent.OutputObject
  >;

  filters: {
    "Attested(address,bytes32)": TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
    Attested: TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;

    "Challenged(address,bytes32,address)": TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;
    Challenged: TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Slashed(address,uint256)": TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
    Slashed: TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
  };
}
