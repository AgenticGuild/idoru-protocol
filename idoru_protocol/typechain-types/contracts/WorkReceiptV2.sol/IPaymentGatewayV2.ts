/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPaymentGatewayV2Interface extends Interface {
  getFunction(nameOrSignature: "payments"): FunctionFragment;

  encodeFunctionData(functionFragment: "payments", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
}

export interface IPaymentGatewayV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPaymentGatewayV2;
  waitForDeployment(): Promise<this>;

  interface: IPaymentGatewayV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  payments: TypedContractMethod<
    [pid: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        fee: bigint;
        expiry: bigint;
        settled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [pid: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        fee: bigint;
        expiry: bigint;
        settled: boolean;
        refunded: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
