/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WorkReceiptV2Interface extends Interface {
  getFunction(
    nameOrSignature: "eas" | "gateway" | "logReceipt" | "nextId" | "receipts"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ReceiptLogged"): EventFragment;

  encodeFunctionData(functionFragment: "eas", values?: undefined): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "logReceipt",
    values: [BytesLike, AddressLike, BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receipts",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "eas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
}

export namespace ReceiptLoggedEvent {
  export type InputTuple = [
    id: BigNumberish,
    paymentId: BytesLike,
    attestationId: BytesLike,
    success: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    paymentId: string,
    attestationId: string,
    success: boolean
  ];
  export interface OutputObject {
    id: bigint;
    paymentId: string;
    attestationId: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorkReceiptV2 extends BaseContract {
  connect(runner?: ContractRunner | null): WorkReceiptV2;
  waitForDeployment(): Promise<this>;

  interface: WorkReceiptV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eas: TypedContractMethod<[], [string], "view">;

  gateway: TypedContractMethod<[], [string], "view">;

  logReceipt: TypedContractMethod<
    [
      paymentId: BytesLike,
      agent: AddressLike,
      attestationId: BytesLike,
      resultHash: BytesLike,
      success: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  nextId: TypedContractMethod<[], [bigint], "view">;

  receipts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, boolean] & {
        paymentId: string;
        agent: string;
        attestationId: string;
        resultHash: string;
        success: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eas"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "logReceipt"
  ): TypedContractMethod<
    [
      paymentId: BytesLike,
      agent: AddressLike,
      attestationId: BytesLike,
      resultHash: BytesLike,
      success: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "receipts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, boolean] & {
        paymentId: string;
        agent: string;
        attestationId: string;
        resultHash: string;
        success: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ReceiptLogged"
  ): TypedContractEvent<
    ReceiptLoggedEvent.InputTuple,
    ReceiptLoggedEvent.OutputTuple,
    ReceiptLoggedEvent.OutputObject
  >;

  filters: {
    "ReceiptLogged(uint256,bytes32,bytes32,bool)": TypedContractEvent<
      ReceiptLoggedEvent.InputTuple,
      ReceiptLoggedEvent.OutputTuple,
      ReceiptLoggedEvent.OutputObject
    >;
    ReceiptLogged: TypedContractEvent<
      ReceiptLoggedEvent.InputTuple,
      ReceiptLoggedEvent.OutputTuple,
      ReceiptLoggedEvent.OutputObject
    >;
  };
}
