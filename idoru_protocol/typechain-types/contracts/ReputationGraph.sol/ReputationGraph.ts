/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ReputationGraphInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentScore"
      | "updateScore"
      | "validatorMarket"
      | "viewScore"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ScoreUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "agentScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewScore",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "agentScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewScore", data: BytesLike): Result;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [agent: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [agent: string, newScore: bigint];
  export interface OutputObject {
    agent: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReputationGraph extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationGraph;
  waitForDeployment(): Promise<this>;

  interface: ReputationGraphInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentScore: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  updateScore: TypedContractMethod<
    [agent: AddressLike, delta: BigNumberish],
    [void],
    "nonpayable"
  >;

  validatorMarket: TypedContractMethod<[], [string], "view">;

  viewScore: TypedContractMethod<[agent: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateScore"
  ): TypedContractMethod<
    [agent: AddressLike, delta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorMarket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "viewScore"
  ): TypedContractMethod<[agent: AddressLike], [bigint], "view">;

  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;

  filters: {
    "ScoreUpdated(address,int256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
  };
}
